import telebot, time
from Task import Task
import markups as m
import staff as s
import shelve
import yoomoney_for_bot as ym
import rand_label as rl
import admin_profile as p

task = Task()
bot = task.bot

@bot.message_handler(commands=['start', 'go'])
def start_handler(message):
    if not task.isRunning:
        chat_id = message.chat.id
        text = message.text
        task.isRunning = True
        msg = bot.send_message(chat_id, task.bot_start_message, reply_markup=m.source_markup)
        bot.register_next_step_handler(msg, menu_handler)
  
@bot.message_handler(content_types=['text'])
def menu_handler(message):
    if task.isRunning:
        if task.isStaffOpen:
            staff_open_msg = bot.send_message(message.chat.id, '–ó–∞–∫—Ä–æ–π—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤!')
            time.sleep(1.1)
            bot.delete_message(message.chat.id, message.message_id)         
            bot.delete_message(staff_open_msg.chat.id, staff_open_msg.message_id)  
        else:
            global msg, user_msg
            text = message.text.lower()
            chat_id = message.chat.id
            if text == '–ø—Ä–∞–≤–∏–ª–∞':
                msg = bot.send_message(chat_id, task.rules_message)
            elif text == '–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
                msg = bot.send_message(chat_id, task.support_message)
            elif text == '/adm':
                if message.from_user.username in task.admins:
                    with shelve.open('adm_prof') as db:
                        user_msg = message
                        msg = bot.send_message(chat_id, '‚≠êÔ∏è–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å‚≠êÔ∏è\n' + f'üíµ–ü—Ä–æ—Ñ–∏—Ç: {db["profit"]} —Ä—É–±.\n' + f'üõÑ–°–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–∫—É–ø–æ–∫: {db["pay_amount"]}', reply_markup=m.admin_buttons())
                else:
                    msg = bot.send_message(chat_id, '‚ùå–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!‚ùå')
            elif text == '—Ç–æ–≤–∞—Ä—ã':
                user_msg = message
                task.isStaffOpen = True
                msg = bot.send_message(chat_id, 'üìÉ–ö–∞—Ç–µ–≥–æ—Ä–∏–∏üìÉ', reply_markup=m.cat_buttons())                
            else:
                msg = bot.send_message(chat_id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª :(')
    else:
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start!')
        
@bot.callback_query_handler(func=lambda call:True)
def staff_handler(call):
    if task.isRunning:
        global msg, user_msg
        text = call.data
        chat_id = call.message.chat.id
        message_id = msg.message_id         
        if not task.isPay:
            if text in s.viewCategores():
                bot.edit_message_text('üìÉ–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ãüìÉ', chat_id, message_id, reply_markup=m.type_buttons(text))
            elif '‚àë' in text and text.split('‚àë')[0] in s.viewTypes(text.split('‚àë')[1]) and len(text.split('‚àë')) == 2:
                if s.availableType(text.split('‚àë')[1], text.split('‚àë')[0]) == True:
                    with shelve.open('staff/' + text.split('‚àë')[1]) as db:
                        bot.edit_message_text(f'üìÉ–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {db[text.split("‚àë")[0]+"_desc"]}\nüíµ–°—Ç–æ–∏–º–æ—Å—Ç—å: {db[text.split("‚àë")[0]+"_cost"]}', chat_id, message_id, reply_markup=m.item_buttons(text.split("‚àë")[1], text.split("‚àë")[0]))
                else:
                    bot.edit_message_text('‚ùå–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ!‚ùå', chat_id, message_id, reply_markup=m.back_buttons())
            elif '‚àë' in text and text.split('‚àë')[0] == 'buy' and len(text.split('‚àë')) == 3:
                task.isPay = True
                global pay_desc
                pay_desc = ym.payment(text.split('‚àë')[1], text.split('‚àë')[2], rl.rand_label())
                bot.edit_message_reply_markup(chat_id,  message_id, reply_markup=m.payment_buttons(text.split('‚àë')[1], text.split('‚àë')[2], chat_id, pay_desc[0]))
            elif text == 'menu':
                bot.delete_message(chat_id, call.message.message_id)
                bot.delete_message(chat_id, user_msg.message_id)
                task.isStaffOpen = False
            elif text == 'staff':
                bot.edit_message_text('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:', chat_id, message_id, reply_markup=m.cat_buttons())
            elif text == 'addcategory':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.addCategory)
            elif text == 'addtype':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.addTypeToCategory)
            elif text == 'additem':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.addItemToType)
            elif text == 'viewcategory':
                msg = bot.send_message(chat_id, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ' + ', '.join(s.viewCategores()))
            elif text == 'viewtypes':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, p.viewTypes)
            elif text == 'changedesc':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.changeTypeDesc)
            elif text == 'changecost':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.changeTypeCost)
            elif text == 'delcategory':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.delCategory)
            elif text == 'deltype':
                msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')
                bot.register_next_step_handler(msg, s.delType)
            elif text == 'adm_close':
                bot.delete_message(chat_id, call.message.message_id)
                bot.delete_message(chat_id, user_msg.message_id)                
            else:
                msg = bot.send_message(chat_id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        else:       
            if text == 'cancelpay':
                task.isPay = False
                bot.delete_message(chat_id, call.message.message_id)
                bot.delete_message(chat_id, user_msg.message_id)
                task.isStaffOpen = False
            elif text == 'checkpay':
                isPayAccepted = ym.checkPayment(pay_desc[1], pay_desc[2])
                if isPayAccepted:
                    bot.send_message(chat_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à —Ç–æ–≤–∞—Ä: ' + s.giveItem(pay_desc[3], pay_desc[4]))
                    bot.delete_message(chat_id, call.message.message_id)
                    bot.delete_message(chat_id, user_msg.message_id)
                    task.isPay = False
                    task.isStaffOpen = False
                else:
                    checkpay_msg = bot.send_message(chat_id, '–°–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É!\n–ï—Å–ª–∏ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –∞ –±–æ—Ç —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –µ—ë, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
                    time.sleep(1)
                    bot.delete_message(chat_id, checkpay_msg.message_id)
            else:
                pay_open_msg = bot.send_message(call.message.chat.id, '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /cancelpay!')
                time.sleep(1.1)
                bot.delete_message(chat_id, call.message.message_id)
                bot.delete_message(pay_open_msg.chat.id, pay_open_msg.message_id)                
    else:
        bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start!')
bot.polling(non_stop=True)
